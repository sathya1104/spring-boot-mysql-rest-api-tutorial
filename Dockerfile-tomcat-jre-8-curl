# docker build -t bnpparibasorg/wmiswarbase:9.0.78.0-alpine-jre-1.8.0-372-07-r1 . -f Dockerfile-tomcat-jre-8-curl --no-cache
FROM alpine:latest
MAINTAINER "Sathya KUMARASWAMY <sathya1104@gmail.com>"
ENV OS_RELEASE="Alpine Linux v3.18"
COPY Dockerfile-tomcat-jre-8-curl /tmp

# Installed main dependencies:
#  ca-certificates-bundle-20230506-r0 x86_64: for certificate management to support SSL
#  openjdk8-jre: OpenJDK built by Timo Ter√§s <timo.teras@iki.fi> from https://icedtea.classpath.org/
#                               https://git.alpinelinux.org/aports/commit/?id=f10a27abc4a038853c5b0f74655a1ca75356c93a
#  fontconfig-2.14.2-r3 x86_64 : For supporting UI/ Fonts for reporting purposes
#  freetype-2.13.1-r5 x86_64: To support freetype fonts
#  openjre: Java Runtime Container

# https://adoptopenjdk.net/installation.html#x64_linux-jre
# Set JRE_HOME not JAVA_HOME as we don't intend to run tomcat in debug mode
ENV JRE_HOME=/usr/lib/jvm/default-jvm/jre
RUN apk --no-cache --virtual add openjdk8-jre --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
ENV PATH=${JRE_HOME}/bin:$PATH
ENV JAVA_VERSION=1.8.0_372-b07
RUN set -eux;\
    apk update \
    && apk upgrade \
    && apk add --no-cache ca-certificates\
	&& apk add --no-cache fontconfig\
	&& apk add --no-cache freetype\
    && rm -rf /var/cache/apk/*

RUN apk add --update curl && \
    apk add --update iputils && \
    apk add --update netcat-openbsd && \
	apk add --update tzdata && \
	apk add --update openssl && \
    rm -rf /var/cache/apk/* && \
	curl --version && \
        ping -c4 localhost && \
        nc -h
	
# COPY ./org-cacert-bundle.crt /usr/local/share/ca-certificates/mycert.crt
# COPY --from stage-0 /usr/local/share/ca-certificates /usr/local/share/ca-certificates
RUN set -eux;\
    chmod 755 /usr/local/share/ca-certificates\
    && update-ca-certificates\
    # Load Organisational fonts
    && mkdir -p /usr/share/fonts/default/TrueType
# COPY --from stage-0 /tmp/custom-fonts/ /usr/share/fonts/default/TrueType


# Inspired from https://github.com/docker-library/tomcat/blob/d570ad0cee10e4526bcbb03391b2c0e322b59313/9.0/jdk11/openjdk-slim/Dockerfile
ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p "$CATALINA_HOME"

WORKDIR $CATALINA_HOME

# let "Tomcat Native" live somewhere isolated
ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR

# see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
# see also "update.sh" (https://github.com/docker-library/tomcat/blob/master/update.sh)
ENV GPG_KEYS 48F8E69F6390C9F25CFEDCD268248959359E722B A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243

ENV TOMCAT_MAJOR 9
ENV TOMCAT_VERSION 9.0.78
ENV TOMCAT_DOWNLOAD_URL https://downloads.apache.org/tomcat/tomcat-${TOMCAT_MAJOR}/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz
ENV TOMCAT_SHA512_URL https://downloads.apache.org/tomcat/tomcat-${TOMCAT_MAJOR}/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz.sha512
# https://downloads.apache.org/tomcat/tomcat-${TOMCAT_MAJOR}/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz.sha512
#ENV TOMCAT_SHA512 c9f2e60489d07f25b53f715918f4b082c5bb69dbc497e0a9d3d5e3a0d351ff2e0ec8dfc5657de840ee5b3dea6174b27630033b38e36fa4c06b08664e70dec8df 

# Install Tomcat
RUN set -eux;\
    wget "$TOMCAT_DOWNLOAD_URL" -qO apache-tomcat-${TOMCAT_VERSION}.tar.gz\
    && wget -qO- "$TOMCAT_SHA512_URL" | sha512sum -c -\
    && mkdir -p /usr/local/tomcat\
    && tar -xf apache-tomcat-${TOMCAT_VERSION}.tar.gz --strip-components=1\
    && rm bin/*.bat\
    && rm apache-tomcat-${TOMCAT_VERSION}.tar.gz*\
    && rm -rf webapps\
    && mkdir webapps\
    && find ./bin/ -name '*.sh' -exec sed -ri 's|^#!/bin/sh$|#!/usr/bin/env sh|' '{}' + \
    && chmod -R +rX . \
    && chmod 777 logs temp work

#Create config and log folders
RUN mkdir -p ${CATALINA_HOME}/conf/ ${CATALINA_HOME}/logs/ ${CATALINA_HOME}/config/

# Copy Custom init scripts if required
# COPY bin/setenv.sh ${CATALINA_HOME}/bin/setenv.sh

# Remove default Tomcat installation files
RUN rm -rf ${CATALINA_HOME}/webapps/*
# COPY conf/context.xml           $CATALINA_HOME/conf/context.xml
# COPY conf/server.xml            $CATALINA_HOME/conf/server.xml
# COPY conf/web.xml               $CATALINA_HOME/conf/web.xml
# COPY conf/logging.properties    $CATALINA_HOME/conf/logging.properties
# Copy any additional organisational default files to override tomcat default config files

# User Management
# Add custom group tomcat with 61000 as a groupid to avoid conflicts with any existing groups
RUN addgroup -g 61000 tomcat

# Add custom user tomcat with same uid 61000 as gid to avoid conflict with exist user
# User with no home directory, no password, group as tomcat and username as tomcat
RUN adduser -H -D -G tomcat -u 61000 tomcat

# We put the tomcat user as the owner of the folder of tomcat to limit access to tomcat process on container resources
RUN set -eux;\
    chown -R tomcat:tomcat /usr/local/tomcat\
    # Users cannot modify configuration of tomcat
    && chmod -R g+r /usr/local/tomcat/conf\
    # Users can modify the other folders
    && chmod -R g+w /usr/local/tomcat/logs\
    && chmod -R g+w /usr/local/tomcat/temp\
    && chmod -R g+w /usr/local/tomcat/webapps\
    && chmod -R g+w /usr/local/tomcat/work\
    # Activate the sticky-bit for new files keep permissions defined:
    && chmod -R g+s /usr/local/tomcat/conf\
    && chmod -R g+s /usr/local/tomcat/logs\
    && chmod -R g+s /usr/local/tomcat/temp\
    && chmod -R g+s /usr/local/tomcat/webapps\
    && chmod -R g+s /usr/local/tomcat/work

# Set Execute permissions on init script
# RUN chown tomcat:tomcat ${CATALINA_HOME}/bin/setenv.sh
# RUN chmod 750 ${CATALINA_HOME}/bin/setenv.sh

# Set user as tocmat by uid to be compatible with kubernetes psp
USER 61000

EXPOSE 8080

CMD [ "catalina.sh", "run" ]