# docker build -t sathya1104/openjdk:8-alpine-temurin . -f Dockerfile-adoptium-temurin-jdk8 --no-cache

FROM alpine:latest

# Download jdk binary from temurin github (in future add sha checksum verification)
# Use jlink and we can use it remove more default modules and reduce image size

# see https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/KEYS
# see also "update.sh" (https://github.com/docker-library/tomcat/blob/master/update.sh)


ENV JDK_MAJOR 8
ENV JDK_VERSION 8u362b09
ENV JDK_PATCH_VERSION jdk8u362
ENV JDK_BUILD_VERSION b09

ENV JDK_DOWNLOAD_URL https://github.com/adoptium/temurin8-binaries/releases/download/${JDK_PATCH_VERSION}-${JDK_BUILD_VERSION}/OpenJDK8U-jdk_x64_alpine-linux_hotspot_${JDK_VERSION}.tar.gz

WORKDIR /root

# Download JDK
RUN set -eux;\
    mkdir -p /usr/lib/jvm/default-jvm/ \
    && wget "$JDK_DOWNLOAD_URL" -qO /usr/lib/jvm/default-jvm/OpenJDK8-jdk_x64_alpine-linux_hotspot_${JDK_VERSION}.tar.gz\
    && tar -xf /usr/lib/jvm/default-jvm/OpenJDK8-jdk_x64_alpine-linux_hotspot_${JDK_VERSION}.tar.gz -C /usr/lib/jvm/default-jvm/ --strip-components=1\
	&& rm -rf /usr/lib/jvm/default-jvm/OpenJDK8-jdk_x64_alpine-linux_hotspot_${JDK_VERSION}.tar.gz


ENV OS_RELEASE="Alpine Linux v3.17"

# Installed main dependencies:
#  ca-certificates-bundle-20220614-r4 x86_64: for certificate management to support SSL
#  openjdk8-jre: OpenJDK built by Timo Ter√§s <timo.teras@iki.fi> from https://icedtea.classpath.org/
#                               https://git.alpinelinux.org/aports/commit/?id=f10a27abc4a038853c5b0f74655a1ca75356c93a
#  fontconfig-2.14.1-r0 x86_64 : For supporting UI/ Fonts for reporting purposes
#  freetype-2.12.1-r0 x86_64: To support freetype fonts
#  openjre: Java Runtime Container

# https://adoptopenjdk.net/installation.html#x64_linux-jre
# Set JRE_HOME not JAVA_HOME as we don't intend to run tomcat in debug mode
ENV JRE_HOME=/usr/lib/jvm/default-jvm/jre
COPY Dockerfile-tomcat-jre-adoptium-temurin-jdk8 /tmp
ENV PATH=${JRE_HOME}/bin:$PATH
ENV JAVA_VERSION=1.8.0_362

RUN set -eux;\

    # CIS-4.7 Ensure update instructions are not use alone in the Dockerfile
    # apk update \
    # && apk upgrade \
    # && apk add --no-cache ca-certificates\

    # Now Add Support for cacerts
    # https://hackernoon.com/alpine-docker-image-with-secured-communication-ssl-tls-go-restful-api-128eb6b54f1f
    apk add --no-cache ca-certificates\

    # Now Add Support for UI/Font configurations
    # java.lang.UnsatisfiedLinkError: /usr/local/openjdk-11/lib/libfontmanager.so: libfreetype.so.6: cannot open shared object file: No such file or directory
    # java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11FontManager
    # https://github.com/docker-library/openjdk/pull/235#issuecomment-424466077
     \fontconfig freetype\

    && rm -rf /var/cache/apk/*
	
RUN apk add --update curl && \
    apk add --update iputils && \
    apk add --update netcat-openbsd && \
	apk add --update tzdata && \
	apk add --update openssl && \
	apk add --update lcms2 && \
    rm -rf /var/cache/apk/* && \
	curl --version && \
        ping -c4 localhost && \
        nc -h

# COPY ./org-cacert-bundle.crt /usr/local/share/ca-certificates/mycert.crt
# COPY --from stage-0 /usr/local/share/ca-certificates /usr/local/share/ca-certificates
RUN set -eux;\
    chmod 755 /usr/local/share/ca-certificates\
    && update-ca-certificates\
    # Load Organisational fonts
    && mkdir -p /usr/share/fonts/default/TrueType
# COPY --from stage-0 /tmp/custom-fonts/ /usr/share/fonts/default/TrueType

# User Management
# Add custom group openjre with 1001 as a groupid to avoid conflicts with any existing groups
RUN addgroup -g 1001 openjre

# Add custom user openjre with same uid 1001 as gid to avoid conflict with exist user
# User with no home directory, no password, group as openjre and username as openjre
RUN adduser -H -D -G openjre -u 1001 openjre

# We put the openjre user as the owner of the folder of openjre to limit access to openjre process on container resources
RUN set -eux;\
    mkdir -p /usr/local/opt\
	&& mkdir -p /usr/local/log\
    && chown -R openjre:openjre /usr/local/opt\
    # Users cannot modify configuration of openjre
    && chmod -R g+w /usr/local/log\
    # Activate the sticky-bit for new files keep permissions defined:
    && chmod -R g+s /usr/local/opt\
    && chmod -R g+s /usr/local/log


# Set user as tocmat by uid to be compatible with kubernetes psp
USER 1001

EXPOSE 8080

CMD ["jshell"]